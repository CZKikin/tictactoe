#!/usr/bin/python3
import subprocess as sub
class Colors:
    RESET = '\33[0m'
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[1;33m'

def checkRows():
    counter = 0
    chosenSymbol = "x"

    for i in grid:
        if i == chosenSymbol:
            counter += 1

        elif i != chosenSymbol:
            if i == 0:
                counter = 0
                continue;

            counter = 1
            chosenSymbol = "x" if chosenSymbol == "o" else "o"

        if counter == 3:
            print(f"{Colors.YELLOW}Vyhrává {chosenSymbol}{Colors.RESET}!")
            return True

    return False

def checkCols():
    for i in range (3):
        if grid[i] != 0:
            if grid[i] == grid[i+3]  and grid[i] == grid[i+6]:
                print(f"{Colors.YELLOW}Vyhrává {grid[i]}{Colors.RESET}!")
                return True
    return False

def checkDiag():
    if grid[4]!=0:
        if (grid[0]==grid[4]  and grid[0]==grid[8]) or (grid[2]==grid[4] and grid[2]==grid[6]):
            print(f"{Colors.YELLOW}Vyhrává {grid[4]}{Colors.RESET}!")
            return True
    return False



def checkForWinner():
    return checkRows() or checkCols() or checkDiag()
        
    
def printGrid():
    colorGrid = [] 
    for i in grid:
        if i == "x":
            colorGrid.append(f"{Colors.RED}x{Colors.RESET}")
        elif i == "o":
            colorGrid.append(f"{Colors.GREEN}o{Colors.RESET}")
        else:
            colorGrid.append(" ")

    print(f"""  | 1 | 2 | 3
A | {colorGrid[0]} | {colorGrid[1]} | {colorGrid[2]}
B | {colorGrid[3]} | {colorGrid[4]} | {colorGrid[5]}
C | {colorGrid[6]} | {colorGrid[7]} | {colorGrid[8]}
""")

def inputField():
    while 1:
        try:
            field = str(input("Zadej políčko: ")).lower()
            if field == "":
                print("Chyba, zadej pole např.: a2")
                continue

            if ord(field[0]) < ord("a") or ord(field[0]) > ord("c"): 
                print("Chyba, zadej pole např.: a2")
                continue

            if int(field[1]) < 1 or int(field[1]) > 3:
                print("Chyba, zadej pole např.: a2")
                continue

        except Exception as e:
            print(f"{e}\nChyba, zadej pole napr.: a2")
            continue
        break

    return field

def freeField():
    for i in grid:
        if i == 0:
            return True
    return False

def placeToGrid(field, xTurn):
    conv = {"a": 0,
        "b": 3,
        "c": 6}

    index = conv[field[0]] + int(field[1])-1

    if grid[index] == 0:
        grid[index] = f"x" if xTurn else f"o"
        return 1
    else:
        print("Snažil si se přepsat uložené pole.. zadej znovu!")
        return 2

    if not freeField():
        return 0 



grid = [0,0,0,0,0,0,0,0,0]
gameLoop = True
xTurn = True

while gameLoop:
    printGrid()
    chosenField = inputField()
    ret = placeToGrid(chosenField, xTurn)

    if ret == 0:
        print("Remíza")
        break;

    if ret == 1:
        sub.call("clear", shell=True)
        xTurn = not xTurn

    if checkForWinner():
        printGrid()
        gameLoop = False
